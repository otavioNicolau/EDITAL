import { prisma } from '@/lib/prisma'
import { NextResponse } from 'next/server'

const blocks = [
  {
    name: "L√≠ngua Portuguesa",
    topics: [
      "Compreens√£o e interpreta√ß√£o de textos",
      "Coes√£o e coer√™ncia textual",
      "Pontua√ß√£o",
      "Crase",
      "Concord√¢ncia verbal e nominal",
      "Reg√™ncia verbal e nominal",
      "Sintaxe"
    ]
  },
  {
    name: "Racioc√≠nio L√≥gico-Matem√°tico",
    topics: [
      "Fun√ß√µes",
      "Progress√µes Aritm√©ticas e Geom√©tricas",
      "Probabilidade e Estat√≠stica",
      "An√°lise Combinat√≥ria",
      "Geometria",
      "Porcentagem e Juros"
    ]
  },
  {
    name: "Inform√°tica",
    topics: [
      "Seguran√ßa da Informa√ß√£o",
      "Cloud Computing",
      "Intelig√™ncia Artificial/Big Data/IoT",
      "Sistemas Operacionais",
      "Redes de Computadores",
      "Banco de Dados"
    ]
  },
  {
    name: "F√≠sica",
    topics: [
      "Mec√¢nica",
      "Termodin√¢mica",
      "Eletromagnetismo",
      "√ìptica",
      "Ondas"
    ]
  },
  {
    name: "√âtica no Servi√ßo P√∫blico",
    topics: [
      "Princ√≠pios √©ticos",
      "C√≥digo de √âtica Profissional",
      "Conflito de interesses",
      "Transpar√™ncia p√∫blica"
    ]
  },
  {
    name: "Geopol√≠tica",
    topics: [
      "Rela√ß√µes internacionais",
      "Blocos econ√¥micos",
      "Conflitos mundiais",
      "Geografia pol√≠tica"
    ]
  },
  {
    name: "L√≠nguas Estrangeiras",
    topics: [
      "Ingl√™s - Interpreta√ß√£o de textos",
      "Ingl√™s - Gram√°tica",
      "Espanhol - Interpreta√ß√£o de textos",
      "Espanhol - Gram√°tica"
    ]
  },
  {
    name: "Legisla√ß√£o de Tr√¢nsito",
    topics: [
      "C√≥digo de Tr√¢nsito Brasileiro",
      "Infra√ß√µes e penalidades",
      "Sinaliza√ß√£o",
      "Dire√ß√£o defensiva"
    ]
  },
  {
    name: "Direito Administrativo",
    topics: [
      "Princ√≠pios da Administra√ß√£o P√∫blica",
      "Atos administrativos",
      "Licita√ß√µes e contratos",
      "Servi√ßos p√∫blicos",
      "Responsabilidade civil do Estado"
    ]
  },
  {
    name: "Direito Constitucional",
    topics: [
      "Princ√≠pios fundamentais",
      "Direitos e garantias fundamentais",
      "Organiza√ß√£o do Estado",
      "Organiza√ß√£o dos Poderes",
      "Controle de constitucionalidade"
    ]
  },
  {
    name: "Direito Penal",
    topics: [
      "Teoria geral do crime",
      "Crimes contra a pessoa",
      "Crimes contra o patrim√¥nio",
      "Crimes contra a Administra√ß√£o P√∫blica",
      "Penas e medidas de seguran√ßa"
    ]
  },
  {
    name: "Direito Processual Penal",
    topics: [
      "Inqu√©rito policial",
      "A√ß√£o penal",
      "Provas",
      "Pris√µes e medidas cautelares",
      "Procedimentos"
    ]
  },
  {
    name: "Legisla√ß√£o Especial",
    topics: [
      "Lei de Drogas",
      "Estatuto da Crian√ßa e do Adolescente",
      "Lei Maria da Penha",
      "Crimes hediondos",
      "Lavagem de dinheiro"
    ]
  },
  {
    name: "Direitos Humanos",
    topics: [
      "Declara√ß√£o Universal dos Direitos Humanos",
      "Pactos internacionais",
      "Sistema interamericano",
      "Grupos vulner√°veis",
      "Pol√≠ticas p√∫blicas"
    ]
  }
]

// GET /api/seed - Verificar status do banco
export async function GET() {
  try {
    const blocksCount = await prisma.block.count()
    const topicsCount = await prisma.topic.count()
    const itemsCount = await prisma.studyItem.count()
    
    return NextResponse.json({
      status: blocksCount > 0 ? 'seeded' : 'empty',
      counts: {
        blocks: blocksCount,
        topics: topicsCount,
        items: itemsCount
      }
    })
  } catch (error) {
    console.error('Erro ao verificar status do banco:', error)
    return NextResponse.json(
      { error: 'Erro ao verificar status do banco' },
      { status: 500 }
    )
  }
}

export async function POST() {
  try {
    console.log('üå± Iniciando seed do banco de dados via API...')

    // Verificar se j√° existem dados no banco
    const existingBlocks = await prisma.block.count()
    if (existingBlocks > 0) {
      console.log('‚úÖ Banco j√° possui dados, pulando seed.')
      return NextResponse.json({ 
        success: true,
        message: 'Banco j√° possui dados, seed n√£o executada',
        blocksCount: existingBlocks 
      })
    }

    // Limpar dados existentes (s√≥ por seguran√ßa)
    await prisma.review.deleteMany()
    await prisma.studySession.deleteMany()
    await prisma.studyItem.deleteMany()
    await prisma.topic.deleteMany()
    await prisma.block.deleteMany()

    // Criar blocos e t√≥picos
    for (let i = 0; i < blocks.length; i++) {
      const blockData = blocks[i]
      
      const block = await prisma.block.create({
        data: {
          name: blockData.name,
          order: i + 1,
        }
      })

      // Criar t√≥picos para cada bloco
      for (const topicName of blockData.topics) {
        await prisma.topic.create({
          data: {
            name: topicName,
            blockId: block.id,
            weight: 1,
            status: 'PLANNED'
          }
        })
      }
    }

    const totalBlocks = await prisma.block.count()
    const totalTopics = await prisma.topic.count()

    console.log(`‚úÖ Seed executada com sucesso! ${totalBlocks} blocos e ${totalTopics} t√≥picos criados.`)

    return NextResponse.json({
      success: true,
      message: `Seed executado com sucesso! Criados ${totalBlocks} blocos e ${totalTopics} t√≥picos.`,
      blocksCreated: totalBlocks,
      topicsCreated: totalTopics
    })
  } catch (error) {
    console.error('‚ùå Erro ao executar seed:', error)
    return NextResponse.json(
      { success: false, error: 'Erro ao executar seed', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    )
  }
}
