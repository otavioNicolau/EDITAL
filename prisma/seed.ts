import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Iniciando seed do banco de dados...')

  // Limpar dados existentes
  await prisma.studySession.deleteMany()
  await prisma.review.deleteMany()
  await prisma.studyItem.deleteMany()
  await prisma.topic.deleteMany()
  await prisma.block.deleteMany()

  // L√çNGUA PORTUGUESA (BLOCO 1)
  const linguaPortuguesa = await prisma.block.create({
    data: {
      name: 'L√≠ngua Portuguesa',
      order: 1,
    },
  })

  const topicosPortugues = [
    'Compreens√£o e interpreta√ß√£o de textos',
    'Reconhecimento de tipos e g√™neros textuais',
    'Dom√≠nio da ortografia oficial',
    'Coes√£o textual',
    'Emprego de elementos de referencia√ß√£o, substitui√ß√£o e repeti√ß√£o',
    'Emprego de conectores e outros elementos de sequencia√ß√£o textual',
    'Dom√≠nio da estrutura morfossint√°tica do per√≠odo',
    'Emprego das classes de palavras',
    'Rela√ß√µes de coordena√ß√£o entre ora√ß√µes e termos',
    'Rela√ß√µes de subordina√ß√£o entre ora√ß√µes e termos',
    'Emprego dos sinais de pontua√ß√£o',
    'Concord√¢ncia verbal e nominal',
    'Reg√™ncia verbal e nominal',
    'Emprego do sinal indicativo de crase',
    'Coloca√ß√£o dos pronomes √°tonos',
    'Significa√ß√£o das palavras',
    'Substitui√ß√£o de palavras ou trechos',
    'Reorganiza√ß√£o de ora√ß√µes e per√≠odos',
    'Reescrita de textos de diferentes g√™neros e formalidade',
    'Correspond√™ncia oficial (Manual de Reda√ß√£o da PR)',
    'Aspectos gerais da reda√ß√£o oficial',
    'Finalidade dos expedientes oficiais',
    'Adequa√ß√£o da linguagem ao documento',
    'Adequa√ß√£o do formato ao g√™nero',
  ]

  for (const topico of topicosPortugues) {
    await prisma.topic.create({
      data: {
        blockId: linguaPortuguesa.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // RACIOC√çNIO L√ìGICO-MATEM√ÅTICO (BLOCO 1)
  const raciocinio = await prisma.block.create({
    data: {
      name: 'Racioc√≠nio L√≥gico-Matem√°tico',
      order: 2,
    },
  })

  const topicosRaciocinio = [
    'Modelagem de situa√ß√µes-problema por equa√ß√µes do 1¬∫ e 2¬∫ graus e sistemas lineares',
    'No√ß√£o de fun√ß√£o',
    'Fun√ß√µes afim, quadr√°tica, exponencial e logar√≠tmica',
    'Aplica√ß√µes de fun√ß√µes',
    'Taxas de varia√ß√£o',
    'Raz√£o e propor√ß√£o',
    'Regra de tr√™s simples e composta',
    'Porcentagem',
    'Sequ√™ncias num√©ricas, PA e PG',
    'Contagem, probabilidade e estat√≠stica',
    'Descri√ß√£o e an√°lise de dados',
    'Leitura e interpreta√ß√£o de tabelas e gr√°ficos',
    'C√°lculo de m√©dias e desvios',
    'Teoria dos conjuntos',
    'Geometria plana e espacial',
    'Escalas',
    'Visualiza√ß√£o espacial, proje√ß√µes, cortes',
    'M√©trica, √°reas e volumes',
    'Estimativas e aplica√ß√µes',
  ]

  for (const topico of topicosRaciocinio) {
    await prisma.topic.create({
      data: {
        blockId: raciocinio.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // INFORM√ÅTICA (BLOCO 1)
  const informatica = await prisma.block.create({
    data: {
      name: 'Inform√°tica',
      order: 3,
    },
  })

  const topicosInformatica = [
    'Conceitos e utiliza√ß√£o de tecnologias, ferramentas, aplicativos e internet/intranet',
    'Ferramentas comerciais (navegadores, e-mail, redes sociais, colabora√ß√£o)',
    'No√ß√µes de sistema operacional (Windows)',
    'Transforma√ß√£o digital',
    'IoT, Big Data, Intelig√™ncia Artificial',
    'Seguran√ßa (v√≠rus, phishing, antiv√≠rus, firewall, VPN etc.)',
    'Computa√ß√£o em nuvem',
  ]

  for (const topico of topicosInformatica) {
    await prisma.topic.create({
      data: {
        blockId: informatica.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // NO√á√ïES DE F√çSICA (BLOCO 1)
  const fisica = await prisma.block.create({
    data: {
      name: 'No√ß√µes de F√≠sica',
      order: 4,
    },
  })

  const topicosFisica = [
    'Cinem√°tica escalar e vetorial',
    'Movimento circular',
    'Leis de Newton',
    'Energia mec√¢nica, trabalho e pot√™ncia',
    'Impulso e quantidade de movimento',
    'Gravita√ß√£o',
    'Est√°tica dos corpos r√≠gidos',
    'Hidrost√°tica',
  ]

  for (const topico of topicosFisica) {
    await prisma.topic.create({
      data: {
        blockId: fisica.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // √âTICA NO SERVI√áO P√öBLICO (BLOCO 1)
  const etica = await prisma.block.create({
    data: {
      name: '√âtica no Servi√ßo P√∫blico',
      order: 5,
    },
  })

  const topicosEtica = [
    '√âtica e moral',
    '√âtica, princ√≠pios e valores',
    '√âtica e democracia: exerc√≠cio da cidadania',
    '√âtica e fun√ß√£o p√∫blica',
    '√âtica no Setor P√∫blico',
    'Lei n¬∫ 8.112/1990 e suas altera√ß√µes: regime disciplinar',
    'Lei n¬∫ 8.429/1992: improbidade administrativa',
    'Lei n¬∫ 12.813/2013: conflito de interesses no exerc√≠cio de cargo ou emprego do Poder Executivo',
    'Decreto n¬∫ 1.171/1994: C√≥digo de √âtica Profissional do Servidor P√∫blico Civil do Poder Executivo Federal',
    'Decreto n¬∫ 6.029/2007: Sistema de Gest√£o da √âtica do Poder Executivo Federal',
    'Resolu√ß√£o n¬∫ 10/2008 da Comiss√£o de √âtica P√∫blica da Presid√™ncia da Rep√∫blica',
  ]

  for (const topico of topicosEtica) {
    await prisma.topic.create({
      data: {
        blockId: etica.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // GEOPOL√çTICA BRASILEIRA (BLOCO 1)
  const geopolitica = await prisma.block.create({
    data: {
      name: 'Geopol√≠tica Brasileira',
      order: 6,
    },
  })

  const topicosGeopolitica = [
    'Territ√≥rio brasileiro',
    'Posi√ß√£o geogr√°fica do Brasil',
    'Organiza√ß√£o do Estado brasileiro',
    'Divis√£o pol√≠tica e administrativa',
    'Regionaliza√ß√£o',
    'Popula√ß√£o brasileira',
    'Economia brasileira',
    'Meio ambiente no Brasil',
    'Amaz√¥nia',
  ]

  for (const topico of topicosGeopolitica) {
    await prisma.topic.create({
      data: {
        blockId: geopolitica.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // L√çNGUA ESTRANGEIRA (BLOCO 1)
  const linguaEstrangeira = await prisma.block.create({
    data: {
      name: 'L√≠ngua Estrangeira',
      order: 7,
    },
  })

  const topicosLinguaEstrangeira = [
    'Ingl√™s: Compreens√£o de textos escritos em l√≠ngua inglesa',
    'Ingl√™s: Itens gramaticais relevantes para a compreens√£o dos conte√∫dos sem√¢nticos',
    'Espanhol: Compreens√£o de textos escritos em l√≠ngua espanhola',
    'Espanhol: Itens gramaticais relevantes para a compreens√£o dos conte√∫dos sem√¢nticos',
  ]

  for (const topico of topicosLinguaEstrangeira) {
    await prisma.topic.create({
      data: {
        blockId: linguaEstrangeira.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // LEGISLA√á√ÉO DE TR√ÇNSITO (BLOCO 2)
  const legislacaoTransito = await prisma.block.create({
    data: {
      name: 'Legisla√ß√£o de Tr√¢nsito',
      order: 8,
    },
  })

  const topicosLegislacaoTransito = [
    'Lei n¬∫ 9.503/1997 (C√≥digo de Tr√¢nsito Brasileiro) e suas altera√ß√µes',
    'Lei n¬∫ 5.970/1973 e suas altera√ß√µes',
    'Resolu√ß√£o CONTRAN n¬∫ 14/1998',
    'Resolu√ß√£o CONTRAN n¬∫ 24/1998',
    'Resolu√ß√£o CONTRAN n¬∫ 26/1998',
    'Resolu√ß√£o CONTRAN n¬∫ 36/1998',
    'Resolu√ß√£o CONTRAN n¬∫ 110/1999',
    'Resolu√ß√£o CONTRAN n¬∫ 149/2003',
    'Resolu√ß√£o CONTRAN n¬∫ 168/2004',
    'Resolu√ß√£o CONTRAN n¬∫ 205/2006',
    'Resolu√ß√£o CONTRAN n¬∫ 210/2006',
    'Resolu√ß√£o CONTRAN n¬∫ 216/2006',
    'Resolu√ß√£o CONTRAN n¬∫ 231/2007',
    'Resolu√ß√£o CONTRAN n¬∫ 245/2007',
    'Resolu√ß√£o CONTRAN n¬∫ 254/2007',
    'Resolu√ß√£o CONTRAN n¬∫ 258/2007',
    'Resolu√ß√£o CONTRAN n¬∫ 267/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 268/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 269/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 271/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 277/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 290/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 292/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 296/2008',
    'Resolu√ß√£o CONTRAN n¬∫ 312/2009',
    'Resolu√ß√£o CONTRAN n¬∫ 320/2009',
    'Resolu√ß√£o CONTRAN n¬∫ 356/2010',
    'Resolu√ß√£o CONTRAN n¬∫ 360/2010',
    'Resolu√ß√£o CONTRAN n¬∫ 371/2010',
    'Resolu√ß√£o CONTRAN n¬∫ 396/2011',
    'Resolu√ß√£o CONTRAN n¬∫ 432/2013',
    'Resolu√ß√£o CONTRAN n¬∫ 460/2013',
    'Resolu√ß√£o CONTRAN n¬∫ 471/2013',
    'Resolu√ß√£o CONTRAN n¬∫ 525/2015',
    'Resolu√ß√£o CONTRAN n¬∫ 552/2015',
    'Resolu√ß√£o CONTRAN n¬∫ 561/2015',
    'Resolu√ß√£o CONTRAN n¬∫ 573/2015',
    'Resolu√ß√£o CONTRAN n¬∫ 598/2016',
    'Resolu√ß√£o CONTRAN n¬∫ 619/2016',
    'Resolu√ß√£o CONTRAN n¬∫ 723/2018',
    'Resolu√ß√£o CONTRAN n¬∫ 789/2020',
    'Resolu√ß√£o CONTRAN n¬∫ 805/2020',
    'Resolu√ß√£o CONTRAN n¬∫ 808/2020',
    'Resolu√ß√£o CONTRAN n¬∫ 886/2021',
  ]

  for (const topico of topicosLegislacaoTransito) {
    await prisma.topic.create({
      data: {
        blockId: legislacaoTransito.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // DIREITO ADMINISTRATIVO (BLOCO 3)
  const direitoAdministrativo = await prisma.block.create({
    data: {
      name: 'Direito Administrativo',
      order: 9,
    },
  })

  const topicosDireitoAdministrativo = [
    'Estado, governo e administra√ß√£o p√∫blica',
    'Direito administrativo',
    'Princ√≠pios do direito administrativo',
    'Organiza√ß√£o administrativa',
    'Administra√ß√£o direta e indireta',
    'Centralizada e descentralizada',
    'Autarquias, funda√ß√µes, empresas p√∫blicas e sociedades de economia mista',
    'Ato administrativo',
    'Conceito, requisitos, atributos, classifica√ß√£o e esp√©cies',
    'Invalida√ß√£o, anula√ß√£o e revoga√ß√£o',
    'Prescri√ß√£o',
    'Agentes administrativos',
    'Investidura e exerc√≠cio da fun√ß√£o p√∫blica',
    'Direitos e deveres dos funcion√°rios p√∫blicos',
    'Regimes jur√≠dicos',
    'Processo administrativo',
    'Poderes da administra√ß√£o',
    'Hier√°rquico, disciplinar, regulamentar e de pol√≠cia',
    'Uso e abuso do poder',
    'Licita√ß√£o',
    'Controle da administra√ß√£o p√∫blica',
  ]

  for (const topico of topicosDireitoAdministrativo) {
    await prisma.topic.create({
      data: {
        blockId: direitoAdministrativo.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // DIREITO CONSTITUCIONAL (BLOCO 3)
  const direitoConstitucional = await prisma.block.create({
    data: {
      name: 'Direito Constitucional',
      order: 10,
    },
  })

  const topicosDireitoConstitucional = [
    'Direito constitucional',
    'Constitui√ß√£o',
    'Poder constituinte',
    'Direitos e garantias fundamentais',
    'Direitos e deveres individuais e coletivos',
    'Direitos sociais',
    'Direitos pol√≠ticos',
    'Partidos pol√≠ticos',
    'Nacionalidade',
    'Organiza√ß√£o do Estado',
    'Organiza√ß√£o pol√≠tico-administrativa',
    'Estado federal brasileiro',
    'Uni√£o',
    'Estados federados',
    'Munic√≠pios',
    'Distrito Federal',
    'Territ√≥rios',
    'Interven√ß√£o',
    'Administra√ß√£o p√∫blica',
    'Disposi√ß√µes gerais',
    'Servidores p√∫blicos',
    'Organiza√ß√£o dos Poderes no Estado brasileiro',
    'Mecanismos de freios e contrapesos',
    'Poder Executivo',
    'Atribui√ß√µes e responsabilidades do presidente da Rep√∫blica',
    'Seguran√ßa p√∫blica',
    'Disposi√ß√µes constitucionais aplic√°veis',
  ]

  for (const topico of topicosDireitoConstitucional) {
    await prisma.topic.create({
      data: {
        blockId: direitoConstitucional.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // DIREITO PENAL (BLOCO 3)
  const direitoPenal = await prisma.block.create({
    data: {
      name: 'Direito Penal',
      order: 11,
    },
  })

  const topicosDireitoPenal = [
    'Aplica√ß√£o da lei penal',
    'Princ√≠pios da legalidade e da anterioridade',
    'Lei penal no tempo e no espa√ßo',
    'Tempo e lugar do crime',
    'Lei penal especial, local e pessoal',
    'Sujeito ativo e sujeito passivo da infra√ß√£o penal',
    'Tipicidade, ilicitude, culpabilidade, punibilidade',
    'Excludentes de ilicitude e de culpabilidade',
    'Erro de tipo',
    'Erro de proibi√ß√£o',
    'Imputabilidade penal',
    'Concurso de pessoas',
    'Crimes contra a pessoa',
    'Crimes contra o patrim√¥nio',
    'Crimes contra a f√© p√∫blica',
    'Crimes contra a administra√ß√£o p√∫blica',
    'Lei n¬∫ 8.072/1990 (Lei dos Crimes Hediondos)',
    'Lei n¬∫ 9.455/1997 (Lei de Tortura)',
    'Lei n¬∫ 10.826/2003 (Estatuto do Desarmamento)',
    'Lei n¬∫ 11.343/2006 (Lei de Drogas)',
    'Lei n¬∫ 9.605/1998 (Lei dos Crimes Ambientais)',
  ]

  for (const topico of topicosDireitoPenal) {
    await prisma.topic.create({
      data: {
        blockId: direitoPenal.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // DIREITO PROCESSUAL PENAL (BLOCO 3)
  const direitoProcessualPenal = await prisma.block.create({
    data: {
      name: 'Direito Processual Penal',
      order: 12,
    },
  })

  const topicosDireitoProcessualPenal = [
    'Aplica√ß√£o da lei processual no tempo, no espa√ßo e em rela√ß√£o √†s pessoas',
    'Disposi√ß√µes preliminares do C√≥digo de Processo Penal',
    'Inqu√©rito policial',
    'Hist√≥rico, natureza, conceito, finalidade, caracter√≠sticas, fundamento, titularidade, grau de cogni√ß√£o, valor probat√≥rio, formas de instaura√ß√£o, notitia criminis, delatio criminis, procedimentos, indiciamento, garantias do investigado, conclus√£o e investiga√ß√£o',
    'A√ß√£o penal',
    'Provas',
    'Pris√µes e liberdade provis√≥ria',
    'Disposi√ß√µes constitucionais aplic√°veis ao direito processual penal',
    'Pris√£o em flagrante',
    'Dilig√™ncias investigat√≥rias',
  ]

  for (const topico of topicosDireitoProcessualPenal) {
    await prisma.topic.create({
      data: {
        blockId: direitoProcessualPenal.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // LEGISLA√á√ÉO ESPECIAL (BLOCO 3)
  const legislacaoEspecial = await prisma.block.create({
    data: {
      name: 'Legisla√ß√£o Especial',
      order: 13,
    },
  })

  const topicosLegislacaoEspecial = [
    'Lei n¬∫ 10.357/2001',
    'Lei n¬∫ 6.815/1980',
    'Lei n¬∫ 7.102/1983',
    'Lei n¬∫ 8.069/1990 (Estatuto da Crian√ßa e do Adolescente)',
    'Lei n¬∫ 10.741/2003 (Estatuto do Idoso)',
    'Lei n¬∫ 11.340/2006 (Lei Maria da Penha)',
    'Lei n¬∫ 12.037/2009',
    'Lei n¬∫ 12.850/2013',
    'Lei n¬∫ 13.675/2018',
    'Lei n¬∫ 13.869/2019',
    'Decreto-Lei n¬∫ 3.688/1941 (Lei das Contraven√ß√µes Penais)',
    'Lei n¬∫ 9.034/1995 (Lei do Crime Organizado)',
  ]

  for (const topico of topicosLegislacaoEspecial) {
    await prisma.topic.create({
      data: {
        blockId: legislacaoEspecial.id,
        name: topico,
        weight: 1,
      },
    })
  }

  // DIREITOS HUMANOS (BLOCO 3)
  const direitosHumanos = await prisma.block.create({
    data: {
      name: 'Direitos Humanos',
      order: 14,
    },
  })

  const topicosDireitosHumanos = [
    'Teoria geral dos direitos humanos',
    'Conceito, terminologia, estrutura normativa, fundamenta√ß√£o',
    'Afirma√ß√£o hist√≥rica dos direitos humanos',
    'Direitos humanos e responsabilidade do Estado',
    'Direitos humanos na Constitui√ß√£o Federal',
    'Pol√≠tica nacional de direitos humanos',
    'Programas nacionais de direitos humanos',
    'Institucionaliza√ß√£o dos direitos e garantias fundamentais',
    'Conceito e mecanismos de prote√ß√£o',
    'Aplica√ß√£o dos tratados internacionais de prote√ß√£o dos direitos humanos no direito brasileiro',
    'Estatuto da Igualdade Racial',
    'C√≥digo de √âtica da Pol√≠cia Rodovi√°ria Federal',
  ]

  for (const topico of topicosDireitosHumanos) {
    await prisma.topic.create({
      data: {
        blockId: direitosHumanos.id,
        name: topico,
        weight: 1,
      },
    })
  }

  console.log('‚úÖ Seeds criadas com sucesso!')
  console.log('üìö Disciplinas criadas como blocos principais:')
  console.log('   - L√≠ngua Portuguesa (BLOCO 1)')
  console.log('   - Racioc√≠nio L√≥gico-Matem√°tico (BLOCO 1)')
  console.log('   - Inform√°tica (BLOCO 1)')
  console.log('   - No√ß√µes de F√≠sica (BLOCO 1)')
  console.log('   - √âtica no Servi√ßo P√∫blico (BLOCO 1)')
  console.log('   - Geopol√≠tica Brasileira (BLOCO 1)')
  console.log('   - L√≠ngua Estrangeira (BLOCO 1)')
  console.log('   - Legisla√ß√£o de Tr√¢nsito (BLOCO 2)')
  console.log('   - Direito Administrativo (BLOCO 3)')
  console.log('   - Direito Constitucional (BLOCO 3)')
  console.log('   - Direito Penal (BLOCO 3)')
  console.log('   - Direito Processual Penal (BLOCO 3)')
  console.log('   - Legisla√ß√£o Especial (BLOCO 3)')
  console.log('   - Direitos Humanos (BLOCO 3)')
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })