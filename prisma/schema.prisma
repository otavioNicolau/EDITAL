// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Block {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int      @default(0)
  topics      Topic[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Topic {
  id            String    @id @default(cuid())
  blockId       String
  block         Block     @relation(fields: [blockId], references: [id])
  name          String
  weight        Int       @default(1)
  status        TopicStatus @default(PLANNED)
  items         StudyItem[]
  reviews       Review[]
  sessions      StudySession[]
  nextReviewAt  DateTime?
  easeFactor    Float     @default(2.5)
  intervalDays  Int       @default(0)
  lapses        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([name, blockId])
}

enum TopicStatus { 
  PLANNED 
  STUDYING 
  REVIEWED 
}

model StudyItem {
  id        String   @id @default(cuid())
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  title     String
  kind      ItemKind
  url       String?
  notes     String?
  tags      String?
  status    ItemStatus @default(TO_STUDY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ItemKind { 
  SUMMARY 
  QUESTION 
  LAW 
  VIDEO 
  OTHER 
}

enum ItemStatus { 
  TO_STUDY 
  IN_PROGRESS 
  DONE 
}

model StudySession {
  id        String   @id @default(cuid())
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  startedAt DateTime
  endedAt   DateTime
  minutes   Int
  notes     String?
}

model Review {
  id        String   @id @default(cuid())
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  reviewedAt DateTime @default(now())
  grade     Int
  easeAfter Float
  intervalAfter Int
  dueAt     DateTime
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
